import Head from 'next/head'
import Styles from '@/styles/Home.module.scss'
import {useEffect, useRef, useState} from "react";
import CanvasDrawer from "@/libraries/canvasDrawer";
import InputRange from "@/components/inputrange";

export default function Home() {
    const inputName = useRef(),
        inputBackground = useRef(),
        canvas = useRef(),
        canvasdrawer = useRef(),
        [inputBackgroundScale,setInputBackgroundScale] = useState(100),
        [inputBackgroundPosX,setInputBackgroundPosX] = useState(0),
        [inputBackgroundPosY,setInputBackgroundPosY] = useState(0),
        [inputCardBackground,setInputCardBackground] = useState("#ffffff"),
        [inputCardMargin,setInputCardMargin] = useState(50),
        [inputCardRadius,setInputCardRadius] = useState(50);
    useEffect(()=>{
        if (isElement(canvas.current)) {
            canvasdrawer.current = new CanvasDrawer(canvas.current);
        }
    },[canvas]);
    useEffect(()=>{
        if (isElement(inputBackground.current)){
            console.log(inputBackground.current)
            inputBackground.current.onchange=(e)=>{
                const fileData = e.target.files[0];
                const reader = new FileReader();
                // ファイル読み込みに成功したときの処理
                reader.onload = function() {
                    // ブラウザ上に画像を表示する
                    const img = document.createElement('img');
                    img.src = reader.result;
                    img.onload=()=>{
                        canvasdrawer.current.setBackground(img);
                    }
                }
                // ファイル読み込みを実行
                reader.readAsDataURL(fileData);
            }
        }
    },[inputBackground]);
    const inputBackgroundScaleOnChange = (e) => {
        setInputBackgroundScale(e.target.value);
        canvasdrawer.current.setBackgroundScale(e.target.value/100);
    }
    const inputBackgroundPosXOnChange = (e) => {
        setInputBackgroundPosX(e.target.value);
        canvasdrawer.current.setBackgroundPosX(e.target.value/100);
    }
    const inputBackgroundPosYOnChange = (e) => {
        setInputBackgroundPosY(e.target.value);
        canvasdrawer.current.setBackgroundPosY(e.target.value/100);
    }
    const inputCardBackgroundOnChange = (e) => {
        setInputCardBackground(e.target.value);
        canvasdrawer.current.setCardBackground(e.target.value);
    }
    const inputCardMarginOnChange = (e) => {
        setInputCardMargin(e.target.value);
        canvasdrawer.current.setCardMargin(e.target.value);
    }
    const inputCardRadiusOnChange = (e) => {
        setInputCardRadius(e.target.value);
        canvasdrawer.current.setCardRadius(e.target.value);
    }
    return (
        <>
            <Head>
                <title>BannerGenerator</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <div className={Styles.wrapper}>
                <div className={Styles.canvasWrapper}>
                    <canvas width={1500} height={500} className={Styles.canvas} ref={canvas}/>
                </div>
                <div className={Styles.inputWrapper}>
                    <div className={Styles.inputContainer}>
                        <h2>背景</h2>
                        <p><input type="file" accept={"image/*"} ref={inputBackground}/></p>
                        <p><InputRange min={0} max={200} step={1} value={inputBackgroundScale} onchange={inputBackgroundScaleOnChange} unit={"%"}/></p>
                        <p><InputRange min={-200} max={200} step={1} value={inputBackgroundPosX} onchange={inputBackgroundPosXOnChange} unit={"%"}/></p>
                        <p><InputRange min={-200} max={200} step={1} value={inputBackgroundPosY} onchange={inputBackgroundPosYOnChange} unit={"%"}/></p>
                    </div>
                    <div className={Styles.inputContainer}>
                        <h2>カード</h2>
                        <h3>マージン</h3>
                        <p><InputRange min={0} max={50} step={1} value={inputCardMargin} onchange={inputCardMarginOnChange} unit={"px"}/></p>
                        <h3>角</h3>
                        <p><InputRange min={0} max={200} step={1} value={inputCardRadius} onchange={inputCardRadiusOnChange} unit={"px"}/></p>
                        <h3>背景色</h3>
                        <p><label><input type="color" value={inputCardBackground} onChange={inputCardBackgroundOnChange}/></label></p>
                    </div>
                </div>
            </div>
        </>
    )
}
function isElement(o){
    return (
        typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2
            o && typeof o === "object" && true && o.nodeType === 1 && typeof o.nodeName==="string"
    );
}